---
slug: how-to-create-and-deploy-a-bridge-app-to-vercel
title: How to create and deploy a Bridge app to Vercel?
authors: [raul]
tags: [devops]
---

# How to create and deploy a Bridge app with Vercel

Vercel is a platform to host frontend applications and static sites but you can also host an express app using serverless functions.
We will see how to create a (https://bridge.codes)[Bridge app] and deploy it to [Vercel](https://vercel.com).

## A quick presentation on Bridge.

Bridge is a Typescript backend framework that focuses on developer experience. It Bridge aims to provide the best developer experience by simplifying the process of developing and integrating APIs.

This is done by heavily using the Typescript inference to create bridges between frontend and backend (through a type-safe generated SDK) and between elements from the backend such as data validation, routes, middlewares and so on.

## Prerequisites

Having (Nodejs)[nodelink] installed on your machine.

## Create your Bridge app

The easiest way it to use the **create-bridge-app** npm package.

You can do that by using:

```bash
npx create-bridge-app@latest
```

And that's it! This should work perfectly on your machine. Try it using:

```
npm run dev
```

However, the code as it is won't work if deployed to Vercel. Some changes have to be made.

## Deploying to Vercel

There are a few things we need to do to deploy our app to vercel:

- Create a **vercel.json** file
- Edit the **index.ts** file
- Edit the **tsconfig.json** file
- Edit the **package.json** file

### vercel.json

The first thing that we will do is to create a **vercel.json** file at the root of your project.

```json
{
  "rewrites": [
    {
      "source": "/api/:path+",
      "destination": "/api"
    }
  ],
  "redirects": [
    {
      "source": "/",
      "destination": "/api"
    }
  ]
}
```

What it does is redirect every request to the '/api' route. A request that would be 'GET /users/all' will be redirected to "GET /api/users/all".
Why is that necessary? Well, because Vercel considers that each file of the '/api' folder is a serverless function and will deploy it as a serverless function.

### index.ts

To make it work, we'll also need to update our **index.ts** file and **initBridge** on the **/api** route:

```ts
import { initBridge, handler, method } from 'bridge';
import express from 'express';

const app = express();

app.get('/api', (req, res) => res.send(`Welcome on Bridge API`));

const heyHandler = handler({
  resolve: () => {
    return 'Hey you!';
  },
});

const routes = {
  hey: method({ GET: heyHandler }),
};

app.use('/api', initBridge({ routes }).expressMiddleware());

app.listen(3000, () => {
  console.log(`Listening on port 3000`);
});

module.exports = app;
```

Don't forget to add the **module.exports = app** at the end of your file.

### package.json

Let's now edit our package.json. We juste need to remove all the "scripts" present in our package.json.
After that, it should look like this:

```json
{
  "name": "deployvercel",
  "version": "1.0.0",
  "dependencies": {
    "bridge": "^2.0.42",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "zod": "^3.20.2"
  },
  "devDependencies": {
    "@types/express": "^4.17.16",
    "@types/node": "^18.11.18",
    "nodemon": "^2.0.20",
    "ts-node": "^10.9.1",
    "typescript": "^4.9.5"
  }
}
```

### tsconfig.json

The purpose is to make our "outDir" "/api"

```json
{
  "compilerOptions": {
    "target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "module": "commonjs" /* Specify what module code is generated. */,
    "outDir": "api" /* Specify an output folder for all emitted files. */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    "strict": true /* Enable all strict type-checking options. */,
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}
```

Now everything should be ready for the deploy, just use **vercel**.

```
vercel
```
