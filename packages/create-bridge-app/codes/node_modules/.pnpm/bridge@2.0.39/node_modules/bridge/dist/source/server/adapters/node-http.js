"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHttpHandler = void 0;
const http_transormers_1 = require("../http-transormers");
const routes_1 = require("../../routes");
const createHttpHandler = (routes, config) => {
    let path;
    let queryString;
    const serverRoutes = (0, routes_1.convertBridgeRoutesToServerRoutes)(routes);
    return async (req, res) => {
        let body = {};
        let file = {};
        const query = (0, http_transormers_1.getJSONQueryFromURL)(req.url || '');
        try {
            [path, queryString] = (req.url || '/').split('?');
            const route = serverRoutes[path];
            const endpoint = route?.[req.method];
            if (!endpoint)
                return res
                    .writeHead(404, { 'Content-Type': 'application/json' })
                    .end(JSON.stringify({ status: 404, name: 'Route not found' }));
            if (endpoint.config.fileConfig && !config?.formidable)
                throw new Error(`You need to install formidable and to give it to Bridge in order to use files.`);
            if (endpoint.config.fileConfig)
                file = await (0, http_transormers_1.formidableAsyncParseFiles)(req, config?.formidable);
            else
                body = await (0, http_transormers_1.getJSONDataFromRequestStream)(req);
            const mid = {};
            const result = await endpoint.handle({
                body,
                file,
                query,
                headers: req.headers,
                mid,
            });
            if (!result)
                return res.writeHead(200, { 'Content-Type': 'application/json' }).end(JSON.stringify({}));
            if (result?.error) {
                config?.errorHandler?.({ error: result.error, path: path });
                return res
                    .writeHead(result.error.status || 500, { 'Content-Type': 'application/json' })
                    .end(JSON.stringify({ error: result.error }));
            }
            return res
                .writeHead(200, {
                'Content-Type': typeof result === 'object' ? 'application/json' : 'text/plain',
            })
                .end(typeof result === 'object' ? JSON.stringify(result) : result);
        }
        catch (err) {
            config?.errorHandler?.({
                error: { status: 500, name: 'Internal server error', data: err },
                path: path,
            });
            return res
                .writeHead(500, { 'Content-Type': 'application/json' })
                .end(JSON.stringify({ status: 500, name: 'Internal server error' }));
        }
    };
};
exports.createHttpHandler = createHttpHandler;
//# sourceMappingURL=node-http.js.map