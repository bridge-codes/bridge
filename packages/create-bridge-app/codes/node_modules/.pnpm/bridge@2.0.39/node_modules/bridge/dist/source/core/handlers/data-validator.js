"use strict";
// This code was strongly inspired from @trpc/server
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataValidator = exports.isZodParser = void 0;
const error_1 = require("../../error");
const handler_1 = require("../handler");
const isZodParser = (parser) => typeof parser?.safeParse === 'function';
exports.isZodParser = isZodParser;
/**
 *  This handler is used to validate data from the body, the
 */
class DataValidator extends handler_1.AbstractHandler {
    parser;
    dataToValidate;
    output;
    constructor(parser, dataToValidate) {
        super();
        this.parser = parser;
        this.dataToValidate = dataToValidate;
    }
    isYupParser = (parser) => typeof parser.validateSync === 'function';
    isSuperstructParser = (parser) => typeof parser.create === 'function';
    isZodParser = (parser) => typeof parser.safeParse === 'function';
    handle = async (data) => {
        try {
            if (this.isYupParser(this.parser))
                this.parser.validateSync(data[this.dataToValidate]);
            else if (this.isZodParser(this.parser))
                this.parser.parse(data[this.dataToValidate]);
            else if (this.isSuperstructParser(this.parser))
                this.parser.create(data[this.dataToValidate]);
            return super.handle(data);
        }
        catch (error) {
            switch (this.dataToValidate) {
                case 'body':
                    return (0, error_1.httpError)(error_1.StatusCode.BAD_REQUEST, `Body schema validation error`, error);
                case 'query':
                    return (0, error_1.httpError)(error_1.StatusCode.BAD_REQUEST, `Parameters schema validation error`, error);
                case 'headers':
                    return (0, error_1.httpError)(error_1.StatusCode.BAD_REQUEST, `Headers schema validation error`, error);
            }
        }
    };
}
exports.DataValidator = DataValidator;
//# sourceMappingURL=data-validator.js.map