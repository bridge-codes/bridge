import { AbstractHandler, Handler } from '../handler';
type YupParser<T = any> = {
    validateSync: (input: unknown) => T;
};
type SuperstructParser<T = any> = {
    create: (input: unknown) => T;
};
type ZodParser<T = any> = {
    parse: (input: any) => T;
};
export type DataParser<T = any> = YupParser<T> | ZodParser<T> | SuperstructParser<T>;
export type InferDataParser<Val extends DataParser> = Val extends DataParser<infer Output> ? Output : any;
export declare const isZodParser: (parser: any) => parser is ZodParser<any>;
/**
 *  This handler is used to validate data from the body, the
 */
export declare class DataValidator<Output = any> extends AbstractHandler {
    private parser;
    private dataToValidate;
    output: Output;
    constructor(parser: DataParser<Output>, dataToValidate: 'body' | 'query' | 'headers');
    private isYupParser;
    private isSuperstructParser;
    private isZodParser;
    handle: Handler['handle'];
}
export {};
//# sourceMappingURL=data-validator.d.ts.map