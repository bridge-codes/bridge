import { BridgeHandler } from '../core';
export declare class BridgeMethod<BHGet extends BridgeHandler | null, BHPost extends BridgeHandler | null, BHPatch extends BridgeHandler | null, BHPut extends BridgeHandler | null, BHDelete extends BridgeHandler | null> {
    methods: {
        GET?: BHGet;
        POST?: BHPost;
        PATCH?: BHPatch;
        PUT?: BHPut;
        DELETE?: BHDelete;
    };
    isBridgeMethodObject: boolean;
    type: {
        getBridgeMehthodSDK: BHGet;
        postBridgeMehthodSDK: BHPost;
        patchBridgeMehthodSDK: BHPatch;
        putBridgeMehthodSDK: BHPut;
        deleteBridgeMehthodSDK: BHDelete;
    };
    constructor(methods: {
        GET?: BHGet;
        POST?: BHPost;
        PATCH?: BHPatch;
        PUT?: BHPut;
        DELETE?: BHDelete;
    });
}
export declare const isBridgeMethod: (obj: any) => obj is BridgeMethod<any, any, any, any, any>;
export declare const method: <BHGet extends BridgeHandler<any, any> | null = null, BHPost extends BridgeHandler<any, any> | null = null, BHPatch extends BridgeHandler<any, any> | null = null, BHPut extends BridgeHandler<any, any> | null = null, BHDelete extends BridgeHandler<any, any> | null = null>(p: {
    GET?: BHGet | undefined;
    POST?: BHPost | undefined;
    PATCH?: BHPatch | undefined;
    PUT?: BHPut | undefined;
    DELETE?: BHDelete | undefined;
}) => BridgeMethod<BHGet, BHPost, BHPatch, BHPut, BHDelete>;
//# sourceMappingURL=method.d.ts.map